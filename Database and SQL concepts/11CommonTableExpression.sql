/* Common Table Expression (CTE) */

CREATE TABLE employees1 (
	id SERIAL PRIMARY KEY,
	name VARCHAR(255) NOT NULL,
	salary INTEGER NOT NULL
);

INSERT INTO employees1 (name, salary) VALUES
	('John Doe', 45000),
	('Jane Smith', 55000),
	('Bob Johnson', 65000),
	('Alice Lee', 75000);

-- Create a CTE that selects all employees whose salary is greater than or equal to 50000


SELECT * FROM employees1;

WITH cte AS (
SELECT * FROM employees1 WHERE salary >= 50000
)

SELECT * FROM cte WHERE salary > 60000;

--Create a CTE that selects all books published after 2000.
CREATE TABLE books (
	id SERIAL PRIMARY KEY,
	title VARCHAR(255) NOT NULL,
	author VARCHAR(255) NOT NULL,
	published_year INTEGER NOT NULL
);

INSERT INTO books (title, author, published_year) VALUES
	('The Cather in the Rye','J.D. Salinger', 1951),
	('To Kill a Mockingbird','Harper Leaf', 1960),
	('1984','George Orwell', 1949),
	('The Greate Gatsby','F. Scott FItzgerald', 1925),
	('The Lord of the Rings','J.R.R. Tlkein', 1954),
	('The Da Vinci Code','Dan Brown', 2003);

WITH new_books AS(
	SELECT title, author, published_year
	FROM books
	WHERE published_year > 2000
)

SELECT * FROM new_books;
	




--Joining Tables


CREATE TABLE departments1 (
	id SERIAL PRIMARY KEY,
	name VARCHAR(255) NOT NULL
);

INSERT INTO departments1 (name) VALUES
	('Sales'),
	('Marketing'),
	('IT');

CREATE TABLE employees2 (
	id SERIAL PRIMARY KEY,
	name VARCHAR(255) NOT NULL,
	department_id INTEGER NOT NULL
);

INSERT INTO employees2 ( name, department_id) VALUES
	('Abhishek Ram', 1),
	('Bill Gates',2),
	('Steve Jobs',1),
	('Jack Dowrsey',3);
	
-- Create  CTE that joins the two tables and selects the anme of each employee and the anme of thier department.

 WITH empolyee_cte AS (
	SELECT * FROM employees2 WHERE department_id = 1
 )
SELECT * FROM empolyee_cte e
JOIN departments1 d ON e.department_id = d.id;

--Multiple SELECT CTE

--create cte that selects the toatl number of items sold and the 
--total revenue generated by the store for each month.

CREATE TABLE itmes (
	id SERIAL PRIMARY KEY,
	name VARCHAR(255) NOT NULL,
	price INTEGER NOT NULL
);

CREATE TABLE sales1 (
	id SERIAL PRIMARY KEY,
	item_id INTEGER NOT NULL,
	quantity INTEGER NOT NULL,
	sale_date DATE NOT NULL
);

INSERT INTO itmes (name, price) VALUES
	 ('Product A',100),
	  ('Product B',200),
	   ('Product C',300);

INSERT INTO sales1 (item_id, quantity, sale_date) VALUES
	(1,10,'2022-01-01'),
	(2,5,'2022-01-01'),
	(3,2,'2022-01-01'),
	(1,20,'2022-02-01'),
	(2,10,'2022-02-01'),
	(3,4,'2022-02-01'),
	(1,30,'2022-03-01'),
	(2,15,'2022-03-01'),
	(3,6,'2022-01-01');

WITH monthly_revenue AS (
SELECT 
EXTRACT('month' FROM s.sale_date) as sale_month, 
SUM(s.quantity * i.price ) as total_revenue
FROM sales1 s
JOIN itmes i ON i.id = s.item_id
GROUP BY sale_month
),
monthly_items_sold AS (
SELECT 
EXTRACT('month' FROM sale_date) sale_month,
SUM(quantity) item_sold
FROM sales1
GROUP BY sale_month
)

SELECT mr.sale_month, mr.total_revenue, mis.item_sold FROM monthly_revenue mr
JOIN monthly_items_sold mis ON mr.sale_month = mis.sale_month;















